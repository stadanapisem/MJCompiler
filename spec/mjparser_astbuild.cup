package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import java.io.*;

// *****************  KEYWORDS **********************
terminal PROGRAM, CONST, VOID, BREAK, CLASS, IF, ELSE, NEW, RETURN, DO, WHILE, EXTENDS;
terminal CONTINUE, PRINT, READ;

// *****************  OPERATORS *********************
terminal PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ, GRT, GRTEQ, LSS, LEQ, AND, OR, ASSIGN, INC, DEC;
terminal SEMI, COMMA, DOT, LPAREN, RPAREN, RBRACE, LBRACE, LSQUARE, RSQUARE;

// *****************  IDENTIFICATORS ****************
terminal int NUMBER;
terminal Boolean BOOL;
terminal char CHAR;
terminal String IDENT;

// *****************  NONTERMINALS  *****************
nonterminal Program program;
nonterminal Program_name program_name;

nonterminal Type type;
nonterminal Method_return_type method_return_type;

nonterminal Declaration_list declaration_list;
nonterminal Declaration declaration;
nonterminal
            Const_declaration_line const_declaration_line;
nonterminal Const_id_list const_id_list;
nonterminal Const_id const_id;
nonterminal Const_identifier const_identifier;
nonterminal Constant constant;
nonterminal Numeric_const numeric_const;
nonterminal Bool_const bool_const;
nonterminal Char_const char_const;
nonterminal
            Var_declaration_line var_declaration_line;
nonterminal Var_declaration_list var_declaration_list;
nonterminal Var_id_list var_id_list;
nonterminal Var_id var_id;
nonterminal Var_identifier var_identifier;
nonterminal
            Class_declaration class_declaration;
nonterminal Class_identifier class_identifier;
nonterminal
            Method_decl_section method_decl_section;
nonterminal Optional_method_decl_section optional_method_decl_section;
nonterminal Method_decl_list method_decl_list;
nonterminal Method_decl method_decl;
nonterminal Method_identifier method_identifier;
nonterminal Method_definition method_definition;
nonterminal
            Formal_parameter_section formal_parameter_section;
nonterminal Formal_parameter_list formal_parameter_list;
nonterminal Formal_parameter formal_parameter;

nonterminal Statement_list statement_list;
// **************************************************
// PRODUCTIONS
//
// *****************  PROGRAM  **********************
program ::= (Program) PROGRAM program_name:o declaration_list:d1 LBRACE method_decl_section:m2 RBRACE {: RESULT=new Program(o, d1, m2); RESULT.setLine(oleft); :};
program_name ::= (ProgramName) IDENT:id {: RESULT=new ProgramName(id); RESULT.setLine(idleft); :};

// *****************  TYPE **************************
type ::= (Type) IDENT:id {: RESULT=new Type(id); RESULT.setLine(idleft); :};
method_return_type ::= (MethodReturnType) type:t1 {: RESULT=new MethodReturnType(t1); RESULT.setLine(t1left); :}
                     | (VoidReturnType) VOID {: RESULT=new VoidReturnType(); :};

// *****************  DECLARATIONS ******************
declaration_list ::= (DeclarationList) declaration_list:d1 declaration:d2 {: RESULT=new DeclarationList(d1, d2); RESULT.setLine(d1left); :}
                   | (NoDeclarations) {: RESULT=new NoDeclarations(); :} /* epsilon */;

  declaration ::= (DeclarationConst) const_declaration_line:c1 {: RESULT=new DeclarationConst(c1); RESULT.setLine(c1left); :}
                | (DeclarationVar) var_declaration_line:v1 {: RESULT=new DeclarationVar(v1); RESULT.setLine(v1left); :}
                | (DeclarationClass) class_declaration:c1 {: RESULT=new DeclarationClass(c1); RESULT.setLine(c1left); :};

    // *** CONSTANT DECLARATION
    const_declaration_line ::= (ConstDeclarationLine) CONST type: t const_id_list:c1 SEMI {: RESULT=new ConstDeclarationLine(t, c1); RESULT.setLine(tleft); :};
      const_id_list ::= (ConstIdList) const_id_list:c1 COMMA const_id:c2 {: RESULT=new ConstIdList(c1, c2); RESULT.setLine(c1left); :}
                      | (ConstIdTerm) const_id:c1 {: RESULT=new ConstIdTerm(c1); RESULT.setLine(c1left); :};
        const_id ::= (ConstId) const_identifier:c1 ASSIGN constant:c2 {: RESULT=new ConstId(c1, c2); RESULT.setLine(c1left); :};
        const_identifier ::= (ConstIdentifier) IDENT:id {: RESULT=new ConstIdentifier(id); RESULT.setLine(idleft); :};
        constant ::= (ConstNumber) numeric_const:n1 {: RESULT=new ConstNumber(n1); RESULT.setLine(n1left); :}
                   | (ConstBool) bool_const:b1 {: RESULT=new ConstBool(b1); RESULT.setLine(b1left); :}
                   | (ConstChar) char_const:c1 {: RESULT=new ConstChar(c1); RESULT.setLine(c1left); :};
          numeric_const ::= (NumericConst) NUMBER: var {: RESULT=new NumericConst(var); RESULT.setLine(varleft); :};
          bool_const ::= (BoolConst) BOOL: var {: RESULT=new BoolConst(var); RESULT.setLine(varleft); :};
          char_const ::= (CharConst) CHAR: var {: RESULT=new CharConst(var); RESULT.setLine(varleft); :};

    // *** VARIABLES DECLARATION
    var_declaration_line ::= (VarDeclarationLine) type: t var_id_list:v1 SEMI {: RESULT=new VarDeclarationLine(t, v1); RESULT.setLine(tleft); :};
    var_declaration_list ::= (VarDeclarationList) var_declaration_list:v1 var_declaration_line:v2 {: RESULT=new VarDeclarationList(v1, v2); RESULT.setLine(v1left); :}
                           | (NoVariableDeclarations) {: RESULT=new NoVariableDeclarations(); :} /* epsilon */;
      var_id_list ::= (VarIDList) var_id_list:v1 COMMA var_id:v2 {: RESULT=new VarIDList(v1, v2); RESULT.setLine(v1left); :}
                    | (VarIDTerm) var_id:v1 {: RESULT=new VarIDTerm(v1); RESULT.setLine(v1left); :};
        var_id ::= (VarID) var_identifier: ident {: RESULT=new VarID(ident); RESULT.setLine(identleft); :}
                 | (VarIDArray) var_identifier: ident LSQUARE RSQUARE {: RESULT=new VarIDArray(ident); RESULT.setLine(identleft); :};
           var_identifier ::= (VarIdentifier) IDENT:id {: RESULT=new VarIdentifier(id); RESULT.setLine(idleft); :};

    // *** CLASS DECLARATION
    class_declaration ::= (ClassDeclaration) CLASS class_identifier:c1 LBRACE var_declaration_list:v2 optional_method_decl_section:o3 RBRACE {: RESULT=new ClassDeclaration(c1, v2, o3); RESULT.setLine(c1left); :};
      class_identifier ::= (ClassIdentifier) IDENT: id {: RESULT=new ClassIdentifier(id); RESULT.setLine(idleft); :};

    // *** METHOD DECLARATION
    optional_method_decl_section ::= (OptionalMethodDeclSection) method_decl_section:m1 {: RESULT=new OptionalMethodDeclSection(m1); RESULT.setLine(m1left); :}
                                   | (NoMethodSection) {: RESULT=new NoMethodSection(); :}/* epsilon */;
    method_decl_section ::= (MethodDeclSection) LBRACE method_decl_list:m1 RBRACE {: RESULT=new MethodDeclSection(m1); RESULT.setLine(m1left); :};
      method_decl_list ::= (MethodDeclList) method_decl_list:m1 method_decl:m2 {: RESULT=new MethodDeclList(m1, m2); RESULT.setLine(m1left); :}
                         | (MethodTerm) {: RESULT=new MethodTerm(); :} /* epsilon */;
        method_decl ::= (MethodDeclaration) method_return_type:m1 method_identifier:m2 LPAREN formal_parameter_section:f3 RPAREN var_declaration_list:v4 LBRACE {: RESULT=new MethodDeclaration(m1, m2, f3, v4); RESULT.setLine(m1left); :};
          method_identifier ::= (MethodIdentifier) IDENT: id {: RESULT=new MethodIdentifier(id); RESULT.setLine(idleft); :};
          formal_parameter_section ::= (FormalParameters) formal_parameter_list:f1 {: RESULT=new FormalParameters(f1); RESULT.setLine(f1left); :}
                                     | (NoParameters) {: RESULT=new NoParameters(); :} /* epsilon */;
            formal_parameter_list ::= (FormalParameterList) formal_parameter_list:f1 COMMA formal_parameter:f2 {: RESULT=new FormalParameterList(f1, f2); RESULT.setLine(f1left); :}
                                    | (FormalTermParameter) formal_parameter:f1 {: RESULT=new FormalTermParameter(f1); RESULT.setLine(f1left); :};
              formal_parameter ::= (FormalParameter) type:t1 IDENT:I2 {: RESULT=new FormalParameter(t1, I2); RESULT.setLine(t1left); :};
        method_definition ::= (MethodDefinition) method_decl:m1 statement_list:s2 RBRACE {: RESULT=new MethodDefinition(m1, s2); RESULT.setLine(m1left); :};

// ***************** STATEMENTS *********************
statement_list ::= {: RESULT=new Statement_listDerived1(); :} ;
