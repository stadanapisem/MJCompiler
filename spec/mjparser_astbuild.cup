package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;

// *****************  KEYWORDS **********************
terminal PROGRAM, CONST, VOID, BREAK, CLASS, IF, ELSE, NEW, RETURN, DO, WHILE, EXTENDS;
terminal CONTINUE, PRINT, READ;

// *****************  OPERATORS *********************
terminal PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ, GRT, GRTEQ, LSS, LEQ, AND, OR, ASSIGN, INC, DEC;
terminal SEMI, COMMA, DOT, LPAREN, RPAREN, RBRACE, LBRACE, LSQUARE, RSQUARE;

// *****************  IDENTIFICATORS ****************
terminal int NUMBER;
terminal Boolean BOOL;
terminal char CHAR;
terminal String IDENT;

// *****************  NONTERMINALS  *****************
nonterminal Program program; nonterminal rs.etf.pp1.symboltable.concepts.Obj program_name;

nonterminal rs.etf.pp1.symboltable.concepts.Struct type, method_return_type;

nonterminal Declaration_section declaration_section;
nonterminal Declaration declaration;
nonterminal
            Const_declaration_line const_declaration_line;
nonterminal Const_id_list const_id_list;
nonterminal Const_identifier const_identifier;
nonterminal
            Var_declaration_line var_declaration_line;
nonterminal Var_declaration_list var_declaration_list;
nonterminal Var_id_list var_id_list;
nonterminal Var_id var_id;
nonterminal Var_identifier var_identifier;
nonterminal
            Class_declaration class_declaration;
nonterminal Class_identifier class_identifier;
nonterminal
            Method_decl_section method_decl_section;
nonterminal Optional_method_decl_section optional_method_decl_section;
nonterminal Method_decl_list method_decl_list;
nonterminal Method_decl method_decl;
nonterminal  Method_definition method_definition;
nonterminal
            Formal_parameter_section formal_parameter_section;
nonterminal Formal_parameter_list formal_parameter_list;
nonterminal Formal_parameter formal_parameter;
nonterminal rs.etf.pp1.symboltable.concepts.Obj const_id, method_identifier;
nonterminal rs.etf.pp1.symboltable.concepts.Obj constant, char_const, numeric_const, bool_const;

nonterminal Statement_list statement_list;
nonterminal Statement statement;
nonterminal Print_statement print_statement;
nonterminal Read_statement read_statement;
nonterminal Return_statement return_statement;
nonterminal
            If_statement if_statement;
nonterminal If_statement_header if_statement_header;
nonterminal Do_statement do_statement;
nonterminal Break_statement break_statement;
nonterminal Continue_statement continue_statement;
nonterminal
            Optional_else optional_else;
nonterminal Else_jmp_fix else_jmp_fix;
nonterminal Remember_pc remember_pc;
nonterminal Designator_statement designator_statement;
nonterminal Actual_parameter actual_parameter;
nonterminal Actual_parameter_section actual_parameter_section;
nonterminal Actual_parameter_list actual_parameter_list;
nonterminal Method_call_ident method_call_ident;
nonterminal rs.etf.pp1.symboltable.concepts.Obj designator, array_ident;
nonterminal java.lang.String addition_operator, multiplication_operator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct term, factor, expression, addition_term_list, multiplication_factor_list;
nonterminal rs.etf.pp1.symboltable.concepts.Struct condition, condition_term_list, condition_term, condition_factor_list, condition_factor;
nonterminal java.lang.String rel_operator, or_operator, and_operator;
precedence left ELSE;
// **************************************************
//
// PRODUCTIONS
//
// *****************  PROGRAM  **********************
program ::= (Program) PROGRAM program_name:pName declaration_section:d1 method_decl_section:m2 {: RESULT=new Program(pName, d1, m2); RESULT.setLine(pNameleft); :};
program_name ::= (ProgramName) IDENT:id {: RESULT=new ProgramName(id); RESULT.setLine(idleft); :};

// *****************  TYPE **************************
type ::= (Type) IDENT: typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};
method_return_type ::= (MethodReturnType) type:t1 {: RESULT=new MethodReturnType(t1); RESULT.setLine(t1left); :}
                     | (VoidReturnType) VOID {: RESULT=new VoidReturnType(); :};

// *****************  DECLARATIONS ******************
declaration_section ::= (DeclarationSection) declaration_section:d1 declaration:d2 {: RESULT=new DeclarationSection(d1, d2); RESULT.setLine(d1left); :}
                   | (NoDeclarations) {: RESULT=new NoDeclarations(); :} /* epsilon */;

  declaration ::= (DeclarationConst) const_declaration_line:c1 {: RESULT=new DeclarationConst(c1); RESULT.setLine(c1left); :}
                | (DeclarationVar) var_declaration_line:v1 {: RESULT=new DeclarationVar(v1); RESULT.setLine(v1left); :}
                | (DeclarationClass) class_declaration:c1 {: RESULT=new DeclarationClass(c1); RESULT.setLine(c1left); :};

    // *** CONSTANT DECLARATION
    const_declaration_line ::= (ConstDeclarationLine) CONST type: t const_id_list:c1 SEMI {: RESULT=new ConstDeclarationLine(t, c1); RESULT.setLine(tleft); :};
      const_id_list ::= (ConstIdList) const_id_list:c1 COMMA const_id:c2 {: RESULT=new ConstIdList(c1, c2); RESULT.setLine(c1left); :}
                      | (ConstIdTerm) const_id:c1 {: RESULT=new ConstIdTerm(c1); RESULT.setLine(c1left); :};
        const_id ::= (ConstId) const_identifier:c1 ASSIGN constant:c2 {: RESULT=new ConstId(c1, c2); RESULT.setLine(c1left); :};
        const_identifier ::= (ConstIdentifier) IDENT: id {: RESULT=new ConstIdentifier(id); RESULT.setLine(idleft); :};
        constant ::= (ConstNumber) numeric_const: var {: RESULT=new ConstNumber(var); RESULT.setLine(varleft); :}
                   | (ConstBool) bool_const: var {: RESULT=new ConstBool(var); RESULT.setLine(varleft); :}
                   | (ConstChar) char_const: var {: RESULT=new ConstChar(var); RESULT.setLine(varleft); :};
          numeric_const ::= (NumericConst) NUMBER: var {: RESULT=new NumericConst(var); RESULT.setLine(varleft); :};
          bool_const ::= (BoolConst) BOOL: var {: RESULT=new BoolConst(var); RESULT.setLine(varleft); :};
          char_const ::= (CharConst) CHAR: var {: RESULT=new CharConst(var); RESULT.setLine(varleft); :};

    // *** VARIABLES DECLARATION
    var_declaration_list ::= (VarDeclarationList) var_declaration_list:v1 var_declaration_line:v2 {: RESULT=new VarDeclarationList(v1, v2); RESULT.setLine(v1left); :}
                           | (NoVariableDeclarations) {: RESULT=new NoVariableDeclarations(); :} /* epsilon */;
      var_declaration_line ::= (VarDeclarationLine) type: t var_id_list:v1 SEMI {: RESULT=new VarDeclarationLine(t, v1); RESULT.setLine(tleft); :};
      var_id_list ::= (VarIDList) var_id_list:v1 COMMA var_id:v2 {: RESULT=new VarIDList(v1, v2); RESULT.setLine(v1left); :}
                    | (VarIDTerm) var_id:v1 {: RESULT=new VarIDTerm(v1); RESULT.setLine(v1left); :};
        var_id ::= (VarID) var_identifier: ident {: RESULT=new VarID(ident); RESULT.setLine(identleft); :}
                 | (VarIDArray) var_identifier: ident LSQUARE RSQUARE {: RESULT=new VarIDArray(ident); RESULT.setLine(identleft); :};
           var_identifier ::= (VarIdentifier) IDENT: id {: RESULT=new VarIdentifier(id); RESULT.setLine(idleft); :};

    // *** CLASS DECLARATION
    class_declaration ::= (ClassDeclaration) CLASS class_identifier:c1 LBRACE var_declaration_list:v2 optional_method_decl_section:o3 RBRACE {: RESULT=new ClassDeclaration(c1, v2, o3); RESULT.setLine(c1left); :};
      class_identifier ::= (ClassIdentifier) IDENT: id {: RESULT=new ClassIdentifier(id); RESULT.setLine(idleft); :};

    // *** METHOD DECLARATION
    optional_method_decl_section ::= (OptionalMethodDeclSection) method_decl_section:m1 {: RESULT=new OptionalMethodDeclSection(m1); RESULT.setLine(m1left); :}
                                   | (NoMethodSection) {: RESULT=new NoMethodSection(); :}/* epsilon */;
    method_decl_section ::= (MethodDeclSection) LBRACE method_decl_list:m1 RBRACE {: RESULT=new MethodDeclSection(m1); RESULT.setLine(m1left); :};
      method_decl_list ::= (MethodDeclList) method_decl_list:m1 method_definition:m2 {: RESULT=new MethodDeclList(m1, m2); RESULT.setLine(m1left); :}
                         | (MethodTerm) {: RESULT=new MethodTerm(); :} /* epsilon */;
        method_decl ::= (MethodDeclaration) method_identifier:m1 LPAREN formal_parameter_section:f2 RPAREN var_declaration_list:v3 {: RESULT=new MethodDeclaration(m1, f2, v3); RESULT.setLine(m1left); :};
          method_identifier ::= (MethodIdentifier) method_return_type:m1 IDENT: id {: RESULT=new MethodIdentifier(m1, id); RESULT.setLine(m1left); :};
          formal_parameter_section ::= (FormalParameters) formal_parameter_list:f1 {: RESULT=new FormalParameters(f1); RESULT.setLine(f1left); :}
                                     | (NoParameters) {: RESULT=new NoParameters(); :} /* epsilon */;
            formal_parameter_list ::= (FormalParameterList) formal_parameter_list:f1 COMMA formal_parameter:f2 {: RESULT=new FormalParameterList(f1, f2); RESULT.setLine(f1left); :}
                                    | (FormalTermParameter) formal_parameter:f1 {: RESULT=new FormalTermParameter(f1); RESULT.setLine(f1left); :};
              formal_parameter ::= (FormalParameter) type:t1 IDENT:I2 {: RESULT=new FormalParameter(t1, I2); RESULT.setLine(t1left); :}
                                 | (FormalParameterArray) type:t1 IDENT:I2 LSQUARE RSQUARE {: RESULT=new FormalParameterArray(t1, I2); RESULT.setLine(t1left); :};
        method_definition ::= (MethodDefinition)  method_decl:m1 LBRACE statement_list:s2 RBRACE {: RESULT=new MethodDefinition(m1, s2); RESULT.setLine(m1left); :};

// ***************** STATEMENTS *********************
statement_list ::= (StatementList) statement_list:s1 statement:s2 {: RESULT=new StatementList(s1, s2); RESULT.setLine(s1left); :}
                 | (NoStatements) {: RESULT=new NoStatements(); :} /* epsilon */;
  statement ::= designator_statement:d1 SEMI {: RESULT=new StatementDerived1(d1); RESULT.setLine(d1left); :}
              | read_statement:r1 SEMI {: RESULT=new StatementDerived2(r1); RESULT.setLine(r1left); :}
              | print_statement:p1 SEMI {: RESULT=new StatementDerived3(p1); RESULT.setLine(p1left); :}
              | return_statement:r1 SEMI {: RESULT=new StatementDerived4(r1); RESULT.setLine(r1left); :}
              | if_statement:i1 {: RESULT=new StatementDerived5(i1); RESULT.setLine(i1left); :}
              | (DoStatement) do_statement:d1 SEMI {: RESULT=new DoStatement(d1); RESULT.setLine(d1left); :}
              | (BreakStatement) break_statement:b1 SEMI {: RESULT=new BreakStatement(b1); RESULT.setLine(b1left); :}
              | (ContinueStatement) continue_statement:c1 SEMI {: RESULT=new ContinueStatement(c1); RESULT.setLine(c1left); :}
              | LBRACE statement_list:s1 RBRACE {: RESULT=new StatementDerived6(s1); RESULT.setLine(s1left); :};
    return_statement ::= (ReturnStatement) RETURN expression:e1 {: RESULT=new ReturnStatement(e1); RESULT.setLine(e1left); :}
                       | (ReturnVoid) RETURN {: RESULT=new ReturnVoid(); :};
    read_statement ::= (ReadStatement) READ LPAREN designator:d1 RPAREN {: RESULT=new ReadStatement(d1); RESULT.setLine(d1left); :};
    print_statement ::= (PrintStatement) PRINT LPAREN expression:e1 RPAREN {: RESULT=new PrintStatement(e1); RESULT.setLine(e1left); :}
                      | (ComplexPrintStatement) PRINT LPAREN expression:e1 COMMA numeric_const:n2 RPAREN {: RESULT=new ComplexPrintStatement(e1, n2); RESULT.setLine(e1left); :};
    if_statement ::= (IfStatement) if_statement_header:i1 statement:s2 optional_else:o3 {: RESULT=new IfStatement(i1, s2, o3); RESULT.setLine(i1left); :};
      if_statement_header ::= IF LPAREN condition:c1 RPAREN {: RESULT=new If_statement_headerDerived1(c1); RESULT.setLine(c1left); :};
      optional_else ::= else_jmp_fix:e1 statement:s2 {: RESULT=new Optional_elseDerived1(e1, s2); RESULT.setLine(e1left); :}
                      | {: RESULT=new Optional_elseDerived2(); :} /* epsilon */;
        else_jmp_fix ::= (ElseFix) ELSE {: RESULT=new ElseFix(); :};
    do_statement ::= remember_pc:r1 statement:s2 WHILE LPAREN condition:c3 RPAREN {: RESULT=new Do_statementDerived1(r1, s2, c3); RESULT.setLine(r1left); :};
        remember_pc ::= (RememberPc) DO {: RESULT=new RememberPc(); :};
    break_statement ::= BREAK {: RESULT=new Break_statementDerived1(); :};
    continue_statement ::= CONTINUE {: RESULT=new Continue_statementDerived1(); :};

// ***************** DESIGNATORS ********************
designator_statement ::= (Assignment) designator:d1 ASSIGN expression:e2 {: RESULT=new Assignment(d1, e2); RESULT.setLine(d1left); :}
                       | (Increment) designator:d1 INC {: RESULT=new Increment(d1); RESULT.setLine(d1left); :}
                       | (Decrement) designator:d1 DEC {: RESULT=new Decrement(d1); RESULT.setLine(d1left); :}
                       | (MethodCallDesignator) method_call_ident:m1 actual_parameter_section:a2 RPAREN {: RESULT=new MethodCallDesignator(m1, a2); RESULT.setLine(m1left); :};
    method_call_ident ::= (MethodCallIdent) designator:d1 LPAREN {: RESULT=new MethodCallIdent(d1); RESULT.setLine(d1left); :};
  designator ::= (DesignatorSingle) IDENT: id {: RESULT=new DesignatorSingle(id); RESULT.setLine(idleft); :}
               | (DesignatorArray) array_ident:a1 expression:e2 RSQUARE {: RESULT=new DesignatorArray(a1, e2); RESULT.setLine(a1left); :};
    array_ident ::= (ArrayIdent) IDENT: id LSQUARE {: RESULT=new ArrayIdent(id); RESULT.setLine(idleft); :};
    actual_parameter_section ::= actual_parameter_list:a1 {: RESULT=new Actual_parameter_sectionDerived1(a1); RESULT.setLine(a1left); :}
                               | {: RESULT=new Actual_parameter_sectionDerived2(); :} /* epsilon */;
      actual_parameter_list ::= actual_parameter_list:a1 COMMA actual_parameter:a2 {: RESULT=new Actual_parameter_listDerived1(a1, a2); RESULT.setLine(a1left); :}
                              | actual_parameter:a1 {: RESULT=new Actual_parameter_listDerived2(a1); RESULT.setLine(a1left); :};
        actual_parameter ::= (ActualParameter) expression:e1 {: RESULT=new ActualParameter(e1); RESULT.setLine(e1left); :};

// ***************** EXPRESSIONS ********************
expression ::= (AddExpression) addition_term_list:a1 {: RESULT=new AddExpression(a1); RESULT.setLine(a1left); :};
  addition_term_list ::= (TermList) addition_term_list:a1 addition_operator:a2 term:t3 {: RESULT=new TermList(a1, a2, t3); RESULT.setLine(a1left); :}
                       | (TerminalTerm) term:t1 {: RESULT=new TerminalTerm(t1); RESULT.setLine(t1left); :}
                       | (NegTerminalTerm) MINUS term:t1 {: RESULT=new NegTerminalTerm(t1); RESULT.setLine(t1left); :};
    addition_operator ::= (SignAdd) PLUS: op {: RESULT=new SignAdd(); :}
                        | (SignSub) MINUS: op {: RESULT=new SignSub(); :};
  term ::= (Term) multiplication_factor_list:m1 {: RESULT=new Term(m1); RESULT.setLine(m1left); :};
  multiplication_factor_list ::= (FactorList) multiplication_factor_list:m1 multiplication_operator:m2 factor:f3 {: RESULT=new FactorList(m1, m2, f3); RESULT.setLine(m1left); :}
                               | (TerminalFactor) factor:f1 {: RESULT=new TerminalFactor(f1); RESULT.setLine(f1left); :};
    multiplication_operator ::= (SignMul) MUL: op {: RESULT=new SignMul(); :}
                              | (SignDiv) DIV: op {: RESULT=new SignDiv(); :}
                              | (SignMod) MOD: op {: RESULT=new SignMod(); :};
  factor ::= (ConstantFactor) constant:c1 {: RESULT=new ConstantFactor(c1); RESULT.setLine(c1left); :}
           | (ExpressionFactor) LPAREN expression:e1 RPAREN {: RESULT=new ExpressionFactor(e1); RESULT.setLine(e1left); :}
           | (ConstructorFactor) NEW type:t1 {: RESULT=new ConstructorFactor(t1); RESULT.setLine(t1left); :}
           | (ConstructorArrayFactor) NEW type:t1 LSQUARE expression:e2 RSQUARE {: RESULT=new ConstructorArrayFactor(t1, e2); RESULT.setLine(t1left); :}
           | (DesignatorFactor) designator:d1 {: RESULT=new DesignatorFactor(d1); RESULT.setLine(d1left); :}
           | (MethodCall) method_call_ident:m1 actual_parameter_section:a2 RPAREN {: RESULT=new MethodCall(m1, a2); RESULT.setLine(m1left); :};

// ***************** CONDITIONS *********************
condition ::= (CondExpression) condition_term_list:c1 {: RESULT=new CondExpression(c1); RESULT.setLine(c1left); :};
  condition_term_list ::= (CondTermList) condition_term_list:c1 or_operator:o2 condition_term:c3 {: RESULT=new CondTermList(c1, o2, c3); RESULT.setLine(c1left); :}
                        | (CondTerminalTerm) condition_term:c1 {: RESULT=new CondTerminalTerm(c1); RESULT.setLine(c1left); :};
     or_operator ::= (OperatorOr) OR {: RESULT=new OperatorOr(); :};
    condition_term ::= (CondTerm) condition_factor_list:c1 {: RESULT=new CondTerm(c1); RESULT.setLine(c1left); :};
  condition_factor_list ::= (CondFactorList) condition_factor_list:c1 and_operator:a2 condition_factor:c3 {: RESULT=new CondFactorList(c1, a2, c3); RESULT.setLine(c1left); :}
                          | (TerminalCondFactor) condition_factor:c1 {: RESULT=new TerminalCondFactor(c1); RESULT.setLine(c1left); :};
      and_operator ::= (OperatorAnd) AND {: RESULT=new OperatorAnd(); :};
    condition_factor ::= (TermCondFactor) expression:e1 {: RESULT=new TermCondFactor(e1); RESULT.setLine(e1left); :}
                       | (CondOpFactor) expression:e1 rel_operator:r2 expression:e3 {: RESULT=new CondOpFactor(e1, r2, e3); RESULT.setLine(e1left); :};
  rel_operator ::= (OperatorEq) EQ {: RESULT=new OperatorEq(); :}
                 | (OperatorNeq) NEQ {: RESULT=new OperatorNeq(); :}
                 | (OperatorGrt) GRT {: RESULT=new OperatorGrt(); :}
                 | (OperatorGrteq) GRTEQ {: RESULT=new OperatorGrteq(); :}
                 | (OperatorLss) LSS {: RESULT=new OperatorLss(); :}
                 | (OperatorLeq) LEQ {: RESULT=new OperatorLeq(); :};
