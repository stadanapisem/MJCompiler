
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Feb 03 21:45:32 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Sat Feb 03 21:45:32 CET 2018
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\003\006\000\002\002\004\000\002\004" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\004\000\002\007\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\006\000\002" +
    "\012\005\000\002\012\003\000\002\034\005\000\002\013" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\003\000\002\041\003\000\002\037\003\000" +
    "\002\015\004\000\002\015\002\000\002\014\005\000\002" +
    "\016\005\000\002\016\003\000\002\017\003\000\002\017" +
    "\005\000\002\020\003\000\002\032\011\000\002\033\003" +
    "\000\002\021\004\000\002\021\002\000\002\023\003\000" +
    "\002\023\002\000\002\022\005\000\002\024\004\000\002" +
    "\024\002\000\002\025\007\000\002\035\004\000\002\027" +
    "\003\000\002\027\002\000\002\030\005\000\002\030\003" +
    "\000\002\031\004\000\002\031\006\000\002\026\006\000" +
    "\002\042\004\000\002\042\002\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\003\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\005\000\002\046\004\000\002\046\003\000" +
    "\002\045\006\000\002\044\006\000\002\044\010\000\002" +
    "\047\005\000\002\050\006\000\002\054\004\000\002\054" +
    "\002\000\002\055\003\000\002\051\010\000\002\056\003" +
    "\000\002\052\003\000\002\053\003\000\002\057\005\000" +
    "\002\057\004\000\002\057\004\000\002\057\005\000\002" +
    "\063\004\000\002\064\003\000\002\064\005\000\002\064" +
    "\005\000\002\064\004\000\002\064\005\000\002\065\004" +
    "\000\002\066\004\000\002\067\005\000\002\070\004\000" +
    "\002\061\003\000\002\061\002\000\002\062\005\000\002" +
    "\062\003\000\002\060\003\000\002\075\003\000\002\076" +
    "\005\000\002\076\003\000\002\076\004\000\002\071\003" +
    "\000\002\071\003\000\002\073\003\000\002\077\005\000" +
    "\002\077\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\074\003\000\002\074\005\000\002\074" +
    "\004\000\002\074\007\000\002\074\003\000\002\074\005" +
    "\000\002\100\003\000\002\101\005\000\002\101\003\000" +
    "\002\106\003\000\002\102\003\000\002\103\005\000\002" +
    "\103\003\000\002\107\003\000\002\104\003\000\002\104" +
    "\005\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\004\005\001\002\000\004\002\317\001" +
    "\002\000\004\060\007\001\002\000\012\005\ufffa\010\ufffa" +
    "\052\ufffa\060\ufffa\001\002\000\012\005\uffff\010\uffff\052" +
    "\uffff\060\uffff\001\002\000\012\005\022\010\021\052\011" +
    "\060\012\001\002\000\010\006\uffdb\051\uffdb\060\uffdb\001" +
    "\002\000\052\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\044\ufffe\045\ufffe\050\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\060\ufffe\001\002\000\012\005\ufffb\010\ufffb\052" +
    "\ufffb\060\ufffb\001\002\000\012\005\ufff8\010\ufff8\052\ufff8" +
    "\060\ufff8\001\002\000\012\005\ufff9\010\ufff9\052\ufff9\060" +
    "\ufff9\001\002\000\004\060\060\001\002\000\004\002\001" +
    "\001\002\000\012\005\ufff7\010\ufff7\052\ufff7\060\ufff7\001" +
    "\002\000\004\060\044\001\002\000\004\060\012\001\002" +
    "\000\004\060\025\001\002\000\004\041\033\001\002\000" +
    "\004\041\ufff2\001\002\000\006\044\ufff4\045\ufff4\001\002" +
    "\000\006\044\031\045\030\001\002\000\004\060\025\001" +
    "\002\000\012\005\ufff6\010\ufff6\052\ufff6\060\ufff6\001\002" +
    "\000\006\044\ufff5\045\ufff5\001\002\000\010\055\036\056" +
    "\037\057\041\001\002\000\044\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef\050\uffef" +
    "\054\uffef\001\002\000\006\044\ufff3\045\ufff3\001\002\000" +
    "\044\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\044\uffee\045\uffee\050\uffee\054\uffee\001\002\000\044" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\044\uffed\045\uffed\050\uffed\054\uffed\001\002\000\044\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\044" +
    "\ufff0\045\ufff0\050\ufff0\054\ufff0\001\002\000\044\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\044\uffec" +
    "\045\uffec\050\uffec\054\uffec\001\002\000\044\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\044\ufff1\045" +
    "\ufff1\050\ufff1\054\ufff1\001\002\000\006\017\045\052\uffe0" +
    "\001\002\000\006\017\uffe2\052\uffe2\001\002\000\004\060" +
    "\012\001\002\000\004\052\047\001\002\000\010\051\uffea" +
    "\052\uffea\060\uffea\001\002\000\010\051\uffde\052\011\060" +
    "\012\001\002\000\010\051\uffeb\052\uffeb\060\uffeb\001\002" +
    "\000\004\051\uffdf\001\002\000\004\051\054\001\002\000" +
    "\012\005\uffe3\010\uffe3\052\uffe3\060\uffe3\001\002\000\004" +
    "\052\uffe1\001\002\000\006\044\065\045\064\001\002\000" +
    "\006\044\uffe7\045\uffe7\001\002\000\010\044\uffe4\045\uffe4" +
    "\053\uffe4\001\002\000\010\044\uffe6\045\uffe6\053\062\001" +
    "\002\000\004\054\063\001\002\000\006\044\uffe5\045\uffe5" +
    "\001\002\000\004\060\060\001\002\000\014\005\uffe9\010" +
    "\uffe9\051\uffe9\052\uffe9\060\uffe9\001\002\000\006\044\uffe8" +
    "\045\uffe8\001\002\000\010\006\076\051\074\060\012\001" +
    "\002\000\004\052\114\001\002\000\004\047\100\001\002" +
    "\000\010\006\uffdc\051\uffdc\060\uffdc\001\002\000\004\060" +
    "\ufffd\001\002\000\006\002\uffdd\051\uffdd\001\002\000\004" +
    "\060\077\001\002\000\004\060\ufffc\001\002\000\004\047" +
    "\uffd9\001\002\000\006\050\uffd7\060\012\001\002\000\006" +
    "\045\112\050\uffd8\001\002\000\004\050\110\001\002\000" +
    "\004\060\105\001\002\000\006\045\uffd5\050\uffd5\001\002" +
    "\000\010\045\uffd4\050\uffd4\053\106\001\002\000\004\054" +
    "\107\001\002\000\006\045\uffd3\050\uffd3\001\002\000\006" +
    "\052\uffea\060\uffea\001\002\000\006\052\uffda\060\012\001" +
    "\002\000\004\060\012\001\002\000\006\045\uffd6\050\uffd6" +
    "\001\002\000\030\007\uffd0\011\uffd0\014\uffd0\015\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\051\uffd0\052\uffd0\060\uffd0" +
    "\001\002\000\030\007\137\011\126\014\125\015\133\020" +
    "\120\021\142\022\117\023\131\051\123\052\130\060\122" +
    "\001\002\000\022\013\174\023\131\025\172\047\163\055" +
    "\036\056\037\057\041\060\122\001\002\000\004\047\311" +
    "\001\002\000\004\044\uffb9\001\002\000\030\007\uffd1\011" +
    "\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\051\uffd1\052\uffd1\060\uffd1\001\002\000\060\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\053\310\054\uffb3\001\002\000\010\006\uffd2\051\uffd2\060" +
    "\uffd2\001\002\000\034\007\uffcb\011\uffcb\012\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\051" +
    "\uffcb\052\uffcb\060\uffcb\001\002\000\024\013\174\023\131" +
    "\025\172\044\uffc5\047\163\055\036\056\037\057\041\060" +
    "\122\001\002\000\004\047\304\001\002\000\026\007\137" +
    "\011\126\014\125\015\133\020\120\021\142\022\117\023" +
    "\131\052\130\060\122\001\002\000\030\007\uffd0\011\uffd0" +
    "\014\uffd0\015\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\051" +
    "\uffd0\052\uffd0\060\uffd0\001\002\000\004\046\273\001\002" +
    "\000\022\013\174\023\131\025\172\047\163\055\036\056" +
    "\037\057\041\060\122\001\002\000\026\007\uffbb\011\uffbb" +
    "\014\uffbb\015\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\052" +
    "\uffbb\060\uffbb\001\002\000\004\044\270\001\002\000\024" +
    "\013\174\023\131\025\172\047\163\050\uffa9\055\036\056" +
    "\037\057\041\060\122\001\002\000\014\041\264\042\262" +
    "\043\263\046\210\047\207\001\002\000\004\044\uffba\001" +
    "\002\000\004\044\261\001\002\000\004\044\260\001\002" +
    "\000\004\047\252\001\002\000\004\044\251\001\002\000" +
    "\026\007\137\011\126\014\125\015\133\020\120\021\142" +
    "\022\117\023\131\052\130\060\122\001\002\000\004\044" +
    "\152\001\002\000\004\044\151\001\002\000\004\044\150" +
    "\001\002\000\034\007\uffc8\011\uffc8\012\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\051\uffc8" +
    "\052\uffc8\060\uffc8\001\002\000\034\007\uffcd\011\uffcd\012" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\051\uffcd\052\uffcd\060\uffcd\001\002\000\034\007" +
    "\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\051\uffcc\052\uffcc\060\uffcc\001" +
    "\002\000\004\016\154\001\002\000\004\047\155\001\002" +
    "\000\022\013\174\023\131\025\172\047\163\055\036\056" +
    "\037\057\041\060\122\001\002\000\010\037\246\040\uff8f" +
    "\050\uff8f\001\002\000\044\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\044\uff99\045\uff99\050\uff99\054" +
    "\uff99\001\002\000\010\037\uff8d\040\uff8d\050\uff8d\001\002" +
    "\000\006\040\uff91\050\uff91\001\002\000\044\024\uff9f\025" +
    "\uff9f\026\242\027\243\030\241\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\044\uff9f\045" +
    "\uff9f\050\uff9f\054\uff9f\001\002\000\022\013\174\023\131" +
    "\025\172\047\163\055\036\056\037\057\041\060\122\001" +
    "\002\000\036\024\233\025\235\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\044\uffa5\045" +
    "\uffa5\050\uffa5\054\uffa5\001\002\000\024\031\223\032\227" +
    "\033\224\034\231\035\230\036\225\037\uff8b\040\uff8b\050" +
    "\uff8b\001\002\000\044\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\044\uff9d\045\uff9d\050\uff9d\054\uff9d" +
    "\001\002\000\024\013\174\023\131\025\172\047\163\050" +
    "\uffa9\055\036\056\037\057\041\060\122\001\002\000\050" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\044\uff95\045\uff95\046\210\047\207\050\uff95\054\uff95\001" +
    "\002\000\036\024\uffa3\025\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\045" +
    "\uffa3\050\uffa3\054\uffa3\001\002\000\020\013\174\023\131" +
    "\047\163\055\036\056\037\057\041\060\122\001\002\000" +
    "\004\050\205\001\002\000\004\060\012\001\002\000\006" +
    "\040\177\050\uff93\001\002\000\022\013\174\023\131\025" +
    "\172\047\163\055\036\056\037\057\041\060\122\001\002" +
    "\000\022\013\uff90\023\uff90\025\uff90\047\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\001\002\000\006\040\uff92\050\uff92" +
    "\001\002\000\046\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\044\uff97\045\uff97\050\uff97\053\202\054" +
    "\uff97\001\002\000\022\013\174\023\131\025\172\047\163" +
    "\055\036\056\037\057\041\060\122\001\002\000\004\054" +
    "\204\001\002\000\044\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\044\uff96\045\uff96\050\uff96\054\uff96" +
    "\001\002\000\004\044\uffbc\001\002\000\036\024\uffa2\025" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\044\uffa2\045\uffa2\050\uffa2\054\uffa2\001" +
    "\002\000\024\013\uffb4\023\uffb4\025\uffb4\047\uffb4\050\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\004\060" +
    "\212\001\002\000\022\013\uffac\023\uffac\025\uffac\047\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\001\002\000\060\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\053\213\054\uffb1\001\002\000\022\013\uffad\023" +
    "\uffad\025\uffad\047\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\001\002\000\006\045\uffa7\050\uffa7\001\002\000\004\050" +
    "\222\001\002\000\006\045\uffa6\050\uffa6\001\002\000\006" +
    "\045\220\050\uffaa\001\002\000\022\013\174\023\131\025" +
    "\172\047\163\055\036\056\037\057\041\060\122\001\002" +
    "\000\006\045\uffa8\050\uffa8\001\002\000\044\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\044\uff94\045" +
    "\uff94\050\uff94\054\uff94\001\002\000\022\013\uff89\023\uff89" +
    "\025\uff89\047\uff89\055\uff89\056\uff89\057\uff89\060\uff89\001" +
    "\002\000\022\013\uff87\023\uff87\025\uff87\047\uff87\055\uff87" +
    "\056\uff87\057\uff87\060\uff87\001\002\000\022\013\uff84\023" +
    "\uff84\025\uff84\047\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\001\002\000\022\013\174\023\131\025\172\047\163\055" +
    "\036\056\037\057\041\060\122\001\002\000\022\013\uff88" +
    "\023\uff88\025\uff88\047\uff88\055\uff88\056\uff88\057\uff88\060" +
    "\uff88\001\002\000\022\013\uff85\023\uff85\025\uff85\047\uff85" +
    "\055\uff85\056\uff85\057\uff85\060\uff85\001\002\000\022\013" +
    "\uff86\023\uff86\025\uff86\047\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\001\002\000\010\037\uff8a\040\uff8a\050\uff8a\001" +
    "\002\000\020\013\uffa1\023\uffa1\047\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\001\002\000\020\013\174\023\131\047" +
    "\163\055\036\056\037\057\041\060\122\001\002\000\020" +
    "\013\uffa0\023\uffa0\047\uffa0\055\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\001\002\000\036\024\uffa4\025\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\044" +
    "\uffa4\045\uffa4\050\uffa4\054\uffa4\001\002\000\004\050\240" +
    "\001\002\000\044\024\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\044\uff98\045\uff98\050\uff98\054\uff98\001" +
    "\002\000\020\013\uff9a\023\uff9a\047\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\060\uff9a\001\002\000\020\013\uff9c\023\uff9c\047" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\001\002\000\020" +
    "\013\uff9b\023\uff9b\047\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\001\002\000\020\013\174\023\131\047\163\055\036" +
    "\056\037\057\041\060\122\001\002\000\044\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\044\uff9e\045" +
    "\uff9e\050\uff9e\054\uff9e\001\002\000\022\013\uff8c\023\uff8c" +
    "\025\uff8c\047\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\001" +
    "\002\000\022\013\174\023\131\025\172\047\163\055\036" +
    "\056\037\057\041\060\122\001\002\000\010\037\uff8e\040" +
    "\uff8e\050\uff8e\001\002\000\034\007\uffcf\011\uffcf\012\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\051\uffcf\052\uffcf\060\uffcf\001\002\000\022\013\174" +
    "\023\131\025\172\047\163\055\036\056\037\057\041\060" +
    "\122\001\002\000\006\045\254\050\255\001\002\000\004" +
    "\055\036\001\002\000\004\044\uffc3\001\002\000\004\050" +
    "\257\001\002\000\004\044\uffc2\001\002\000\034\007\uffce" +
    "\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\051\uffce\052\uffce\060\uffce\001\002" +
    "\000\034\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\051\uffc9\052\uffc9" +
    "\060\uffc9\001\002\000\004\044\uffb7\001\002\000\004\044" +
    "\uffb6\001\002\000\022\013\174\023\131\025\172\047\163" +
    "\055\036\056\037\057\041\060\122\001\002\000\004\044" +
    "\uffb8\001\002\000\004\050\267\001\002\000\004\044\uffb5" +
    "\001\002\000\034\007\uffca\011\uffca\012\uffca\014\uffca\015" +
    "\uffca\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\051\uffca" +
    "\052\uffca\060\uffca\001\002\000\004\054\272\001\002\000" +
    "\056\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\054\uffb2\001\002\000\004\060\274\001" +
    "\002\000\056\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\054\uffaf\001\002\000\030\007" +
    "\137\011\126\014\125\015\133\020\120\021\142\022\117" +
    "\023\131\051\276\052\130\060\122\001\002\000\034\007" +
    "\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\051\uffc7\052\uffc7\060\uffc7\001" +
    "\002\000\034\007\uffbe\011\uffbe\012\302\014\uffbe\015\uffbe" +
    "\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\051\uffbe\052" +
    "\uffbe\060\uffbe\001\002\000\034\007\uffc1\011\uffc1\012\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\051\uffc1\052\uffc1\060\uffc1\001\002\000\026\007\137" +
    "\011\126\014\125\015\133\020\120\021\142\022\117\023" +
    "\131\052\130\060\122\001\002\000\026\007\uffbd\011\uffbd" +
    "\014\uffbd\015\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\052" +
    "\uffbd\060\uffbd\001\002\000\034\007\uffbf\011\uffbf\012\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\051\uffbf\052\uffbf\060\uffbf\001\002\000\022\013\174" +
    "\023\131\025\172\047\163\055\036\056\037\057\041\060" +
    "\122\001\002\000\004\050\306\001\002\000\026\007\uffc0" +
    "\011\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\052\uffc0\060\uffc0\001\002\000\004\044\uffc6\001\002" +
    "\000\022\013\uffae\023\uffae\025\uffae\047\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\001\002\000\006\023\131\060\122" +
    "\001\002\000\006\046\210\050\313\001\002\000\004\044" +
    "\uffc4\001\002\000\056\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\054\uffb0\001\002\000" +
    "\004\054\316\001\002\000\056\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\054\uffab\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\004\007\007\001\001\000\002" +
    "\001\001\000\016\005\015\010\012\011\014\014\013\022" +
    "\016\032\017\001\001\000\004\024\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\055\017\056\020\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\042\001\001\000" +
    "\004\005\022\001\001\000\010\012\026\013\023\034\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\023\034\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\036\034\037" +
    "\033\040\041\041\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\045" +
    "\001\001\000\002\001\001\000\004\005\054\001\001\000" +
    "\002\001\001\000\004\015\047\001\001\000\012\005\015" +
    "\014\050\022\051\023\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\065\020\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\072\006\074\025\067\026\071" +
    "\035\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\102\027\101\030\100\031\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\110\001\001\000\006\005\015\014\050\001\001\000" +
    "\006\005\102\031\112\001\001\000\002\001\001\000\004" +
    "\042\114\001\001\000\040\043\120\044\145\045\140\046" +
    "\144\047\123\050\126\051\133\052\137\053\146\056\143" +
    "\057\142\063\134\064\135\065\131\067\115\001\001\000" +
    "\036\036\156\037\033\040\041\041\037\063\166\064\167" +
    "\065\131\067\115\070\313\073\170\074\165\075\314\076" +
    "\163\077\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\036\156\037\033\040\041\041\037" +
    "\063\166\064\167\065\131\067\115\073\170\074\165\075" +
    "\306\076\163\077\161\001\001\000\002\001\001\000\040" +
    "\043\276\044\145\045\140\046\144\047\123\050\126\051" +
    "\133\052\137\053\146\056\143\057\142\063\134\064\135" +
    "\065\131\067\115\001\001\000\004\042\274\001\001\000" +
    "\002\001\001\000\034\036\156\037\033\040\041\041\037" +
    "\063\166\064\167\065\131\067\115\073\170\074\165\075" +
    "\270\076\163\077\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\036\156\037\033\040\041\041\037\060" +
    "\213\061\265\062\216\063\166\064\167\065\131\067\115" +
    "\073\170\074\165\075\215\076\163\077\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\043" +
    "\152\044\145\045\140\046\144\047\123\050\126\051\133" +
    "\052\137\053\146\056\143\057\142\063\134\064\135\065" +
    "\131\067\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\036\156\037\033\040\041\041\037\063\166\064\167\065" +
    "\131\067\115\073\170\074\165\075\164\076\163\077\161" +
    "\100\172\101\174\102\160\103\155\104\157\001\001\000" +
    "\004\107\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\243\001\001\000\034\036" +
    "\156\037\033\040\041\041\037\063\166\064\167\065\131" +
    "\067\115\073\170\074\165\075\236\076\163\077\161\001" +
    "\001\000\004\071\233\001\001\000\004\105\225\001\001" +
    "\000\002\001\001\000\042\036\156\037\033\040\041\041" +
    "\037\060\213\061\214\062\216\063\166\064\167\065\131" +
    "\067\115\073\170\074\165\075\215\076\163\077\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\036\156" +
    "\037\033\040\041\041\037\063\166\064\167\065\131\067" +
    "\115\073\205\074\165\077\161\001\001\000\002\001\001" +
    "\000\004\005\200\001\001\000\004\106\175\001\001\000" +
    "\042\036\156\037\033\040\041\041\037\063\166\064\167" +
    "\065\131\067\115\073\170\074\165\075\164\076\163\077" +
    "\161\102\177\103\155\104\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\036\156\037" +
    "\033\040\041\041\037\063\166\064\167\065\131\067\115" +
    "\073\170\074\165\075\202\076\163\077\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\036\156\037\033\040\041\041\037\060\220" +
    "\063\166\064\167\065\131\067\115\073\170\074\165\075" +
    "\215\076\163\077\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\036\156\037\033\040\041\041\037\063\166" +
    "\064\167\065\131\067\115\073\170\074\165\075\231\076" +
    "\163\077\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\036\156\037\033\040\041\041\037\063\166\064\167" +
    "\065\131\067\115\073\235\074\165\077\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\036\156\037\033\040\041\041\037\063\166" +
    "\064\167\065\131\067\115\074\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\036\156\037\033\040\041" +
    "\041\037\063\166\064\167\065\131\067\115\073\170\074" +
    "\165\075\164\076\163\077\161\104\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\036\156\037\033\040" +
    "\041\041\037\063\166\064\167\065\131\067\115\073\170" +
    "\074\165\075\252\076\163\077\161\001\001\000\002\001" +
    "\001\000\004\040\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\036\156" +
    "\037\033\040\041\041\037\063\166\064\167\065\131\067" +
    "\115\073\170\074\165\075\264\076\163\077\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\043\120\044\145\045" +
    "\140\046\144\047\123\050\126\051\133\052\137\053\146" +
    "\056\143\057\142\063\134\064\135\065\131\067\115\001" +
    "\001\000\002\001\001\000\006\054\277\055\300\001\001" +
    "\000\002\001\001\000\040\043\302\044\145\045\140\046" +
    "\144\047\123\050\126\051\133\052\137\053\146\056\143" +
    "\057\142\063\134\064\135\065\131\067\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\036\156\037\033" +
    "\040\041\041\037\063\166\064\167\065\131\067\115\073" +
    "\170\074\165\075\164\076\163\077\161\100\304\101\174" +
    "\102\160\103\155\104\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\064\311\065\131\067\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // rel_operator ::= LEQ 
            {
              Rel_operator RESULT = null;
		 RESULT=new OperatorLeq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // rel_operator ::= LSS 
            {
              Rel_operator RESULT = null;
		 RESULT=new OperatorLss(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // rel_operator ::= GRTEQ 
            {
              Rel_operator RESULT = null;
		 RESULT=new OperatorGrteq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // rel_operator ::= GRT 
            {
              Rel_operator RESULT = null;
		 RESULT=new OperatorGrt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // rel_operator ::= NEQ 
            {
              Rel_operator RESULT = null;
		 RESULT=new OperatorNeq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // rel_operator ::= EQ 
            {
              Rel_operator RESULT = null;
		 RESULT=new OperatorEq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*rel_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condition_factor ::= expression rel_operator expression 
            {
              Condition_factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Rel_operator r2 = (Rel_operator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondOpFactor(e1, r2, e3); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*condition_factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condition_factor ::= expression 
            {
              Condition_factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermCondFactor(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*condition_factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // and_operator ::= AND 
            {
              And_operator RESULT = null;
		 RESULT=new OperatorAnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*and_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condition_factor_list ::= condition_factor 
            {
              Condition_factor_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition_factor c1 = (Condition_factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TerminalCondFactor(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*condition_factor_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condition_factor_list ::= condition_factor_list and_operator condition_factor 
            {
              Condition_factor_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition_factor_list c1 = (Condition_factor_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		And_operator a2 = (And_operator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition_factor c3 = (Condition_factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactorList(c1, a2, c3); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*condition_factor_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condition_term ::= condition_factor_list 
            {
              Condition_term RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition_factor_list c1 = (Condition_factor_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerm(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*condition_term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // or_operator ::= OR 
            {
              Or_operator RESULT = null;
		 RESULT=new OperatorOr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*or_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condition_term_list ::= condition_term 
            {
              Condition_term_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition_term c1 = (Condition_term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerminalTerm(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*condition_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condition_term_list ::= condition_term_list or_operator condition_term 
            {
              Condition_term_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition_term_list c1 = (Condition_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Or_operator o2 = (Or_operator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition_term c3 = (Condition_term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermList(c1, o2, c3); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*condition_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condition ::= condition_term_list 
            {
              Condition RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition_term_list c1 = (Condition_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondExpression(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= method_call_ident actual_parameter_section RPAREN 
            {
              Factor RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Method_call_ident m1 = (Method_call_ident)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Actual_parameter_section a2 = (Actual_parameter_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodCall(m1, a2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= designator 
            {
              Factor RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorFactor(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= NEW type LSQUARE expression RSQUARE 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstructorArrayFactor(t1, e2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= NEW type 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstructorFactor(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= LPAREN expression RPAREN 
            {
              Factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ExpressionFactor(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= constant 
            {
              Factor RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Constant c1 = (Constant)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstantFactor(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // multiplication_operator ::= MOD 
            {
              Multiplication_operator RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SignMod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*multiplication_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // multiplication_operator ::= DIV 
            {
              Multiplication_operator RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SignDiv(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*multiplication_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // multiplication_operator ::= MUL 
            {
              Multiplication_operator RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SignMul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*multiplication_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // multiplication_factor_list ::= factor 
            {
              Multiplication_factor_list RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TerminalFactor(f1); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*multiplication_factor_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // multiplication_factor_list ::= multiplication_factor_list multiplication_operator factor 
            {
              Multiplication_factor_list RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Multiplication_factor_list m1 = (Multiplication_factor_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Multiplication_operator m2 = (Multiplication_operator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorList(m1, m2, f3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*multiplication_factor_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term ::= multiplication_factor_list 
            {
              Term RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Multiplication_factor_list m1 = (Multiplication_factor_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // addition_operator ::= MINUS 
            {
              Addition_operator RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SignSub(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*addition_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // addition_operator ::= PLUS 
            {
              Addition_operator RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SignAdd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*addition_operator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // addition_term_list ::= MINUS term 
            {
              Addition_term_list RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NegTerminalTerm(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*addition_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // addition_term_list ::= term 
            {
              Addition_term_list RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TerminalTerm(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*addition_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // addition_term_list ::= addition_term_list addition_operator term 
            {
              Addition_term_list RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Addition_term_list a1 = (Addition_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addition_operator a2 = (Addition_operator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermList(a1, a2, t3); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*addition_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= addition_term_list 
            {
              Expression RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Addition_term_list a1 = (Addition_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AddExpression(a1); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*expression*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // actual_parameter ::= expression 
            {
              Actual_parameter RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParameter(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actual_parameter_list ::= actual_parameter 
            {
              Actual_parameter_list RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Actual_parameter a1 = (Actual_parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Actual_parameter_listDerived2(a1); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*actual_parameter_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actual_parameter_list ::= actual_parameter_list COMMA actual_parameter 
            {
              Actual_parameter_list RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Actual_parameter_list a1 = (Actual_parameter_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Actual_parameter a2 = (Actual_parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Actual_parameter_listDerived1(a1, a2); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*actual_parameter_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actual_parameter_section ::= 
            {
              Actual_parameter_section RESULT = null;
		 RESULT=new Actual_parameter_sectionDerived2(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*actual_parameter_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actual_parameter_section ::= actual_parameter_list 
            {
              Actual_parameter_section RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Actual_parameter_list a1 = (Actual_parameter_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Actual_parameter_sectionDerived1(a1); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*actual_parameter_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // array_fld_fix ::= expression RSQUARE 
            {
              Array_fld_fix RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Array_fld_fixDerived1(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*array_fld_fix*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // array_fld_header ::= designator DOT array_fld_ident 
            {
              Array_fld_header RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Array_fld_ident a2 = (Array_fld_ident)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorFieldArray(d1, a2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*array_fld_header*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // array_fld_ident ::= IDENT LSQUARE 
            {
              Array_fld_ident RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ArrayFldIdent(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*array_fld_ident*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_ident ::= IDENT LSQUARE 
            {
              Array_ident RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ArrayIdent(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*array_ident*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // designator ::= THIS DOT IDENT 
            {
              Designator RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorThis(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // designator ::= array_fld_header array_fld_fix 
            {
              Designator RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Array_fld_header a1 = (Array_fld_header)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Array_fld_fix a2 = (Array_fld_fix)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorArrayFld(a1, a2); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designator ::= designator DOT IDENT 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorFieldSingle(d1, id); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // designator ::= array_ident expression RSQUARE 
            {
              Designator RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Array_ident a1 = (Array_ident)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorArray(a1, e2); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // designator ::= IDENT 
            {
              Designator RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorSingle(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // method_call_ident ::= designator LPAREN 
            {
              Method_call_ident RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodCallIdent(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*method_call_ident*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // designator_statement ::= method_call_ident actual_parameter_section RPAREN 
            {
              Designator_statement RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Method_call_ident m1 = (Method_call_ident)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Actual_parameter_section a2 = (Actual_parameter_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodCallDesignator(m1, a2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // designator_statement ::= designator DEC 
            {
              Designator_statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Decrement(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // designator_statement ::= designator INC 
            {
              Designator_statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Increment(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // designator_statement ::= designator ASSIGN expression 
            {
              Designator_statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Assignment(d1, e2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // continue_statement ::= CONTINUE 
            {
              Continue_statement RESULT = null;
		 RESULT=new Continue_statementDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*continue_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // break_statement ::= BREAK 
            {
              Break_statement RESULT = null;
		 RESULT=new Break_statementDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*break_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // remember_pc ::= DO 
            {
              Remember_pc RESULT = null;
		 RESULT=new RememberPc(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*remember_pc*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // do_statement ::= remember_pc statement WHILE LPAREN condition RPAREN 
            {
              Do_statement RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Remember_pc r1 = (Remember_pc)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition c3 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Do_statementDerived1(r1, s2, c3); RESULT.setLine(r1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*do_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_jmp_fix ::= ELSE 
            {
              Else_jmp_fix RESULT = null;
		 RESULT=new ElseFix(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*else_jmp_fix*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optional_else ::= 
            {
              Optional_else RESULT = null;
		 RESULT=new Optional_elseDerived2(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*optional_else*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optional_else ::= else_jmp_fix statement 
            {
              Optional_else RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Else_jmp_fix e1 = (Else_jmp_fix)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Optional_elseDerived1(e1, s2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*optional_else*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement_header ::= IF LPAREN condition RPAREN 
            {
              If_statement_header RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new If_statement_headerDerived1(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*if_statement_header*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_statement ::= if_statement_header statement optional_else 
            {
              If_statement RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		If_statement_header i1 = (If_statement_header)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int o3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int o3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Optional_else o3 = (Optional_else)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfStatement(i1, s2, o3); RESULT.setLine(i1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*if_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print_statement ::= PRINT LPAREN expression COMMA numeric_const RPAREN 
            {
              Print_statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Numeric_const n2 = (Numeric_const)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ComplexPrintStatement(e1, n2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*print_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_statement ::= PRINT LPAREN expression RPAREN 
            {
              Print_statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new PrintStatement(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*print_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // read_statement ::= READ LPAREN designator RPAREN 
            {
              Read_statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReadStatement(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*read_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_statement ::= RETURN 
            {
              Return_statement RESULT = null;
		 RESULT=new ReturnVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*return_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // return_statement ::= RETURN expression 
            {
              Return_statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnStatement(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*return_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= LBRACE statement_list RBRACE 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s1 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDerived6(s1); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= continue_statement SEMI 
            {
              Statement RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Continue_statement c1 = (Continue_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ContinueStatement(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= break_statement SEMI 
            {
              Statement RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Break_statement b1 = (Break_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new BreakStatement(b1); RESULT.setLine(b1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= do_statement SEMI 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Do_statement d1 = (Do_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DoStatement(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= if_statement 
            {
              Statement RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		If_statement i1 = (If_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementDerived5(i1); RESULT.setLine(i1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= return_statement SEMI 
            {
              Statement RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Return_statement r1 = (Return_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDerived4(r1); RESULT.setLine(r1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= print_statement SEMI 
            {
              Statement RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Print_statement p1 = (Print_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDerived3(p1); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= read_statement SEMI 
            {
              Statement RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Read_statement r1 = (Read_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDerived2(r1); RESULT.setLine(r1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= designator_statement SEMI 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator_statement d1 = (Designator_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDerived1(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_list ::= 
            {
              Statement_list RESULT = null;
		 RESULT=new NoStatements(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*statement_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_list ::= statement_list statement 
            {
              Statement_list RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s1 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementList(s1, s2); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*statement_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_definition ::= method_decl LBRACE statement_list RBRACE 
            {
              Method_definition RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Method_decl m1 = (Method_decl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s2 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDefinition(m1, s2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*method_definition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formal_parameter ::= type IDENT LSQUARE RSQUARE 
            {
              Formal_parameter RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new FormalParameterArray(t1, I2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formal_parameter ::= type IDENT 
            {
              Formal_parameter RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameter(t1, I2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formal_parameter_list ::= formal_parameter 
            {
              Formal_parameter_list RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Formal_parameter f1 = (Formal_parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalTermParameter(f1); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              Formal_parameter_list RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Formal_parameter_list f1 = (Formal_parameter_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Formal_parameter f2 = (Formal_parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameterList(f1, f2); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formal_parameter_section ::= 
            {
              Formal_parameter_section RESULT = null;
		 RESULT=new NoParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal_parameter_section ::= formal_parameter_list 
            {
              Formal_parameter_section RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Formal_parameter_list f1 = (Formal_parameter_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameters(f1); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_identifier ::= method_return_type IDENT 
            {
              Method_identifier RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Method_return_type m1 = (Method_return_type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodIdentifier(m1, id); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*method_identifier*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_decl ::= method_identifier LPAREN formal_parameter_section RPAREN var_declaration_list 
            {
              Method_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_identifier m1 = (Method_identifier)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Formal_parameter_section f2 = (Formal_parameter_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_declaration_list v3 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclaration(m1, f2, v3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*method_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_decl_list ::= 
            {
              Method_decl_list RESULT = null;
		 RESULT=new MethodTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*method_decl_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_decl_list ::= method_decl_list method_definition 
            {
              Method_decl_list RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Method_decl_list m1 = (Method_decl_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_definition m2 = (Method_definition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclList(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*method_decl_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_decl_section ::= LBRACE method_decl_list RBRACE 
            {
              Method_decl_section RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Method_decl_list m1 = (Method_decl_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclSection(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_decl_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optional_method_decl_section ::= 
            {
              Optional_method_decl_section RESULT = null;
		 RESULT=new NoMethodSection(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*optional_method_decl_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_method_decl_section ::= method_decl_section 
            {
              Optional_method_decl_section RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_decl_section m1 = (Method_decl_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OptionalMethodDeclSection(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*optional_method_decl_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_extends ::= 
            {
              Optional_extends RESULT = null;
		 RESULT=new Optional_extendsDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*optional_extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optional_extends ::= EXTENDS type 
            {
              Optional_extends RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Extends(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*optional_extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // class_identifier ::= IDENT 
            {
              Class_identifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassIdentifier(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*class_identifier*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // class_declaration ::= CLASS class_identifier optional_extends LBRACE var_declaration_list optional_method_decl_section RBRACE 
            {
              Class_declaration RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Class_identifier c1 = (Class_identifier)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Optional_extends o2 = (Optional_extends)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_declaration_list v3 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int o4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int o4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Optional_method_decl_section o4 = (Optional_method_decl_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDeclaration(c1, o2, v3, o4); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*class_declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_identifier ::= IDENT 
            {
              Var_identifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarIdentifier(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*var_identifier*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_id ::= var_identifier LSQUARE RSQUARE 
            {
              Var_id RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_identifier ident = (Var_identifier)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarIDArray(ident); RESULT.setLine(identleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*var_id*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_id ::= var_identifier 
            {
              Var_id RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_identifier ident = (Var_identifier)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarID(ident); RESULT.setLine(identleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*var_id*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_id_list ::= var_id 
            {
              Var_id_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_id v1 = (Var_id)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarIDTerm(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*var_id_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_id_list ::= var_id_list COMMA var_id 
            {
              Var_id_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_id_list v1 = (Var_id_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_id v2 = (Var_id)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarIDList(v1, v2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*var_id_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_declaration_line ::= type var_id_list SEMI 
            {
              Var_declaration_line RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Var_id_list v1 = (Var_id_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclarationLine(t, v1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*var_declaration_line*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_declaration_list ::= 
            {
              Var_declaration_list RESULT = null;
		 RESULT=new NoVariableDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var_declaration_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_declaration_list ::= var_declaration_list var_declaration_line 
            {
              Var_declaration_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Var_declaration_list v1 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_declaration_line v2 = (Var_declaration_line)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarationList(v1, v2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var_declaration_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // char_const ::= CHAR 
            {
              Char_const RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		char var = (char)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(var); RESULT.setLine(varleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*char_const*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_const ::= BOOL 
            {
              Bool_const RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean var = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConst(var); RESULT.setLine(varleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*bool_const*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numeric_const ::= NUMBER 
            {
              Numeric_const RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		int var = (int)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumericConst(var); RESULT.setLine(varleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*numeric_const*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant ::= char_const 
            {
              Constant RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Char_const var = (Char_const)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstChar(var); RESULT.setLine(varleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant ::= bool_const 
            {
              Constant RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Bool_const var = (Bool_const)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstBool(var); RESULT.setLine(varleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant ::= numeric_const 
            {
              Constant RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Numeric_const var = (Numeric_const)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstNumber(var); RESULT.setLine(varleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_identifier ::= IDENT 
            {
              Const_identifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstIdentifier(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*const_identifier*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_id ::= const_identifier ASSIGN constant 
            {
              Const_id RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Const_identifier c1 = (Const_identifier)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Constant c2 = (Constant)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstId(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*const_id*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_id_list ::= const_id 
            {
              Const_id_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const_id c1 = (Const_id)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstIdTerm(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*const_id_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_id_list ::= const_id_list COMMA const_id 
            {
              Const_id_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Const_id_list c1 = (Const_id_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const_id c2 = (Const_id)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstIdList(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*const_id_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_declaration_line ::= CONST type const_id_list SEMI 
            {
              Const_declaration_line RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Const_id_list c1 = (Const_id_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDeclarationLine(t, c1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*const_declaration_line*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= class_declaration 
            {
              Declaration RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Class_declaration c1 = (Class_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationClass(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= var_declaration_line 
            {
              Declaration RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_declaration_line v1 = (Var_declaration_line)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationVar(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= const_declaration_line 
            {
              Declaration RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const_declaration_line c1 = (Const_declaration_line)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationConst(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_section ::= 
            {
              Declaration_section RESULT = null;
		 RESULT=new NoDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*declaration_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_section ::= declaration_section declaration 
            {
              Declaration_section RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Declaration_section d1 = (Declaration_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Declaration d2 = (Declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationSection(d1, d2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*declaration_section*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_return_type ::= VOID 
            {
              Method_return_type RESULT = null;
		 RESULT=new VoidReturnType(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*method_return_type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_return_type ::= type 
            {
              Method_return_type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodReturnType(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*method_return_type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_name ::= IDENT 
            {
              Program_name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(id); RESULT.setLine(idleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*program_name*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM program_name declaration_section method_decl_section 
            {
              Program RESULT = null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Program_name pName = (Program_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Declaration_section d1 = (Declaration_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_decl_section m2 = (Method_decl_section)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Program(pName, d1, m2); RESULT.setLine(pNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

